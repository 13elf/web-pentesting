#!/usr/bin/python3
import dns
from dns import resolver
import requests
import threading
import time
import argparse
from termcolor import colored


def print_success(message):
    print(colored("[+]","green",attrs=["bold"]), message)

def print_info(message):
    print(colored("[*]","blue",attrs=["bold"]), message)

def print_error(message):
    print(colored("[-]","red",attrs=["bold"]), message)

def print_warning(message):
    print(colored("[!]","yellow",attrs=["bold"]), message)

def get_arguments():
    parser = argparse.ArgumentParser("./stko-scanner.py")
    parser.add_argument("-f","--file",action="store",help="File name to read the domains from",default=None)
    parser.add_argument("-t","--threads",action="store",help="Number of concurrent threads to be created for get requests",default=None)
    args = parser.parse_args()

    global file_name
    file_name = args.__getattribute__("file")
    if file_name == None:
        print_error("Input file containing domain information is missing")
        exit()

    global THREADS
    THREADS = args.__getattribute__("threads")
    if THREADS == None:
        THREADS = 20
    else:
        try:
            THREADS = int(THREADS)
        except Exception as e:
            print_error(e)
            exit()

def remove_empty_lines(arr):
    ret = []
    for i in arr:
        if len(i) != 0:
            ret.append(i)
    return ret

def main(file_name, THREADS):
    content = ""
    try:
        with open(file_name, "r") as f:
            content = f.read()
    except FileNotFoundError:
        print_error("No such file exists: " + file_name)
        exit()

    domains = remove_empty_lines(content.split("\n"))

    print("="*20)
    print("Launching CNAME scan")
    print("="*20)

    response = {}
    for domain in domains:
        try:
            result = dns.resolver.resolve(domain, "CNAME")
            targets = []
            for i in result:
                targets.append(str(i.target))
            response[domain] = targets

        except dns.resolver.NoAnswer:
            pass
        except dns.resolver.NXDOMAIN:
            pass

    print()
    for i in response:
        print(colored("[*]","blue",attrs=["bold"]), i,end=" >> ")
        print(", ".join(response[i]))    

    print()
    print("="*28)
    print("Launching vulnerability scan")
    print("="*28)

    print()
    
    for i in response:
        while True:
            count = threading.active_count()
            if count < THREADS:
                break
            time.sleep(1)

        threading.Thread(target=vulnerability_scan, args=(i,)).start()

def vulnerability_scan(i):
    res = requests.get("http://" + i)
    if res.status_code == 200:
        print_info("Response code: 200 ({})".format(i))
    elif res.status_code == 404:
        print_success("Response code: 404 ({})".format(i))
    else:
        print_warning("Response code: {1} ({0})".format(i,res.status_code))

if __name__ == '__main__':
    get_arguments()
    main(file_name, THREADS)
